package api

import (
	"BackendTemplate/pkg/database"
	"BackendTemplate/pkg/encrypt"
	"bytes"
	"embed"
	"fmt"
	"github.com/gin-gonic/gin"
	"net/http"
	"strconv"
	"strings"
)

//go:embed server/*
var embeddedFiles embed.FS // 嵌入 server 文件夹

func GenServer(c *gin.Context) {
	var serverBody struct {
		OsType   string `json:"osType"`
		ArchType string `json:"archType"`
		Listener string `json:"listener"`
		Pass     string `json:"pass"`
	}
	if err := c.BindJSON(&serverBody); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
	}
	osType := serverBody.OsType
	archType := serverBody.ArchType

	listenerTmp := strings.Split(serverBody.Listener, "://")
	listenerType := listenerTmp[0]
	connectAddress := listenerTmp[1]

	// 查找符合条件的文件
	binaryFileName := findBinary(listenerType, osType, archType)
	if binaryFileName == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "未找到匹配的服务端文件"})
	}
	// 从嵌入的文件系统中读取对应文件内容
	binaryData, err := embeddedFiles.ReadFile("server/" + listenerType + "/" + binaryFileName)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "读取文件失败"})
	}

	var modifiedData []byte
	if listenerType == "oss" {
		// 替换文件中的特定字符串
		oldStr要替换的字符串
		newStr := strings.ReplaceAll(connectAddress, " ", "")

		tmp, _ := encrypt.Encrypt([]byte(newStr))
		tmp2, _ := encrypt.EncodeBase64(tmp)
		newStr = string(tmp2)

		// 替换为的字符串
		newStr = padRight(newStr, len(oldStr))

		modifiedData = bytes.ReplaceAll(binaryData, []byte(oldStr), []byte(newStr))

	} else {
		// 替换文件中的特定字符串
		oldStr := "HOSTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" // 要替换的字符串
		newStr := strings.ReplaceAll(connectAddress, " ", "")                // 替换为的字符串
		newStr = padRight(newStr, len(oldStr))

		modifiedData = bytes.ReplaceAll(binaryData, []byte(oldStr), []byte(newStr))
	}
	oldPass := "PASSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
	newPass := padRight(serverBody.Pass, len(oldPass))
	modifiedData = bytes.ReplaceAll(modifiedData, []byte(oldPass), []byte(newPass))

	// 设置响应头
	c.Header("Content-Description", "File Transfer")
	c.Header("Content-Transfer-Encoding", "binary")
	c.Header("Content-Disposition", "attachment; filename="+binaryFileName) // 根据实际情况调整文件名
	c.Header("Content-Type", "application/octet-stream")                    // 根据实际情况调整MIME类型
	c.Header("Content-Length", strconv.Itoa(len(modifiedData)))

	// 直接将字节写入响应体
	c.Writer.Write(modifiedData)
}
func findBinary(listenerType, osType, archType string) string {
	entries, err := embeddedFiles.ReadDir("server/" + listenerType)
	if err != nil {
		fmt.Printf("读取嵌入目录失败: %v\n", err)
		return ""
	}

	for _, entry := range entries {
		if entry.IsDir() {
			continue
		}
		name := entry.Name()
		if name == "r_"+osType+"_"+archType || name == "r_"+osType+"_"+archType+".exe" {
			//return filepath.Join("server", name)
			return name
		}
	}
	return ""
}

// 填充空格到指定长度
func padRight(str string, length int) string {
	if len(str) >= length {
		return str
	}
	return str + strings.Repeat(" ", length-len(str))
}
func ShowListener(c *gin.Context) {
	var listeners []database.Listener
	database.Engine.Where("status = ?", 1).Find(&listeners)

	var result []string
	for _, listener := range listeners {
		result = append(result, listener.Type+"://"+listener.ConnectAddress)
	}
	c.JSON(http.StatusOK, gin.H{"status": 200, "data": result})

}
